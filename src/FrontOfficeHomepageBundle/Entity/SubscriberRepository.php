<?php

namespace FrontOfficeHomepageBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SubscriberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriberRepository extends EntityRepository
{
	# Nombre d'inscrits par type de formation
	public function getSubscriberByFormation()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT COUNT(s.id) 
			FROM FrontOfficeHomepageBundle:Subscriber s
			JOIN s.formation f
			GROUP BY f.formationType');

		return $query -> getResult();
	}

	#nb d'inscrits + Inscrits par nom de formation
	public function triSubscriber()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT s, COUNT(s.id) 
			FROM FrontOfficeHomepageBundle:Subscriber s 
			JOIN s.formation f 
			GROUP BY f.formationName');

		return $query -> getResult();
	}

	# Inscrits par type de forums
	public function getSubscriberByForum()
	{
		$query = $this -> getEntityManager()-> createQuery('
			SELECT s 
			FROM FrontOfficeHomepageBundle:Subscriber s 
			JOIN s.forum f
			GROUP BY f.forumType');

		return $query -> getResult();
	}

	# Inscrits par nom de forums
	public function triSubscriberByForumName()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT s 
			FROM FrontOfficeHomepageBundle:Subscriber s 
			JOIN s.forum f 
			GROUP BY f.forumName');

		return $query -> getResult();
	}

#Nombre d'inscrits aux forums ayant lieu entre maintenant et le futur
	public function nbSubscriberForums()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT COUNT(s.id)
			FROM FrontOfficeHomepageBundle:Subscriber s 
			JOIN s.forum f
			WHERE f.forumDate > :dateforum')
		->setParameter('dateforum', new \DateTime('now'));

		return $query -> getSingleScalarResult();
	}

	public function nbSubscriberFuture()
	{
		$query = $this -> getEntityManager()->createQuery('
			SELECT COUNT(s.id)
			FROM FrontOfficeHomepageBundle:Subscriber s 
			JOIN s.forum fo 
			JOIN s.formation f
			WHERE fo.forumDate > :dateforum 
			AND f.formationDate > :dateformation')
		->setParameter('dateforum', new \DateTime('now'))
		->setParameter('dateformation', new \DateTime('now'));

		return $query -> getSingleScalarResult();
	}
}
         